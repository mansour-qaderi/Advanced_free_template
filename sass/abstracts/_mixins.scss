@mixin button{
    display: inline-block;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}

// @mixin clearfix {
//     &::after{
//         content: "";
//         display: table;
//         clear: both;

//     }
// }

// Mixins:

@mixin formatMainHeading(
  $font-size,
  $font-weight,
  $letter-spacing,
  $animation-name
) {
  font-size: $font-size;
  font-weight: $font-weight;
  letter-spacing: $letter-spacing;
  animation-name: $animation-name;
}

// CLEARFIX

// The Clearfix hack is a method used on float layouts. Here's how it works:
// When a block or inline-block level element has no child elements nor content, its height defaults to zero.
// When working with float layouts, sometimes you will set 'float' to all child elements of a parent, removing them from the document flow. When that happens, and the parent doesn't have a height specified, it collapses to zero.
// The Clearfix hack exists to solve this problem.

// 1) First you need to specify a pseudo-element (::before or ::after) to the parent element which has its children floeated out of the document flow;
// 2) As with all pseudo-elements, we need to define the content. Since we don't want no content to be displayer, we set it to an empty string;
// 3) Then we set its 'display' property to 'table';
// 4) And finally we set 'clear' to 'both';

// For further explanation, see: https://youtu.be/2tC4PIlEz_o

// Here we will create a mixin to write all this code:
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin calcColumnWidth($guttersInRow, $numOfColumns, $colSpan) {
  // Calculate the sum of the width of all gutters in the grid row
  // A 4-col grid row has 3 gutters, etc...
  $totalGutterWidth: #{$guttersInRow} * #{$gutter-horizontal};

  // What is the width of the base column in that row?
  $baseGridColumn: calc((100% - #{$totalGutterWidth}) / #{$numOfColumns});

  // Does this column span through more than one grid column?
  // If so, how many gutters the span go through?
  $hiddenGutters: calc(#{$colSpan} - 1);

  // Considering all of the above, calculate the width of the column
  $fullColumnWidth: calc(
    (#{$colSpan} * #{$baseGridColumn}) +
      (#{$hiddenGutters} * #{$gutter-horizontal})
  );

  // Outputs the calculated width
  width: $fullColumnWidth;
}

@mixin box-shadow--smooth {
  box-shadow: 0 1.5rem 4rem 0 rgba($color: $color-black, $alpha: 0.15);
}

@mixin center-block {
  // TODO refactor to 'margin-align--center'
  margin-left: auto;
  margin-right: auto;
}

// TODO create @mixin to centralize block using 'position'
// position: absolute or fixed;
// top: 50%;
// left: 50%;
// transform: translate(-50%, -50%);

// MEDIA QUERY MANAGER

/*

0 - 600px: phone
600 - 900px: tablet portrait
900 - 1200px: tablet landscape
1200 - 1800px: default styles
1800+px: big desktops

$breakpoint values

- phone
- tablet-portrait
- tablet-landscape
- big-desktop

=> 1em = 16px;

MEDIA QUERIES WORKFLOW
(a nice order to think about when writing media queries)

1) Base
2) Typography
3) General layout
4) Grid
5) Page layout
6) Components

*/

@mixin respond($breakpoint) {
  @if $breakpoint==phone {
    @media only screen and (max-width: 37.5em) {
      // 600px
      @content;
    }
  }

  @if $breakpoint==tablet-portrait {
    @media only screen and (max-width: 56.25em) {
      // 900px
      @content;
    }
  }

  @if $breakpoint==tablet-landscape {
    @media only screen and (max-width: 75em) {
      // 1200px
      @content;
    }
  }

  @if $breakpoint==big-desktop {
    @media only screen and (min-width: 112.5em) {
      // 1800px
      @content;
    }
  }
}

/*

  In media queries, font-relative CSS units (em & rem) are NOT AFFECTED by the root font-size settings. This means that (in media queries) 1em & 1rem always equals the font-size defined in the Browser.

  Most browsers' default font-size is 16px. But if the user changes it to, say, 20px, than the media query will treat BOTH 1em & 1rem as 20px, no matter what we set as root font-size definitions.

  Safari browsers, however, produce unexpected behavior when using REM in media queries, so the community decided to use EM's to define breakpoints.

  What you do is devide the breakpoint value in PX by 16px (default font-size in most browsers), and set it as EM's.

  Ex: for breakpoint 600px, divide 600px/16px to get 37.5em;

  For more on this topic:
  https://dev.to/danburzo/making-sense-of-css-media-queries-in-the-year-2019-52jj

*/
